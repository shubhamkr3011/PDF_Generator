import datetime
import random

def _get_base_html_template(title: str, body_content: str) -> str:
    """A base HTML template with a professional 'Ocean Blue' theme."""
    return f"""
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>{title}</title>
        <style>
            @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap');
            :root {{
                --primary-color: #0077b6;  /* Deep Ocean Blue */
                --secondary-color: #00b4d8; /* Lighter Sky Blue */
                --accent-color: #90e0ef;   /* Very Light Blue */
                --background-color: #f0f8ff; /* Alice Blue */
                --text-color: #343a40;      /* Dark Gray */
                --card-bg-color: #ffffff;
            }}
            body {{
                font-family: 'Poppins', sans-serif;
                background-color: var(--background-color);
                margin: 0;
                padding: 20px;
                color: var(--text-color);
            }}
            .container {{
                max-width: 850px;
                margin: 20px auto;
                background-color: var(--card-bg-color);
                border-radius: 12px;
                box-shadow: 0 6px 20px rgba(0, 0, 0, 0.08);
                overflow: hidden;
            }}
            .header {{
                background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
                color: white;
                padding: 30px 25px;
            }}
            .header h1 {{ margin: 0; font-size: 2.2em; font-weight: 600; }}
            .header p {{ margin: 5px 0 0; opacity: 0.9; font-size: 1.1em;}}
            .content-section {{ padding: 30px; border-bottom: 1px solid #e9ecef; }}
            .content-section:last-child {{ border-bottom: none; }}
            h2 {{
                font-size: 1.5em;
                font-weight: 600;
                color: var(--primary-color);
                border-bottom: 2px solid var(--accent-color);
                padding-bottom: 10px;
                margin-top: 0;
            }}
            .info-grid {{
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
                gap: 25px;
            }}
            .info-item strong {{
                display: block;
                color: #555;
                margin-bottom: 6px;
                font-size: 0.9em;
                text-transform: uppercase;
            }}
            .info-item span {{ font-size: 1.1em; }}
            .flight-leg, .itinerary-leg {{
                background-color: #f8f9fa;
                border: 1px solid #dee2e6;
                border-left: 5px solid var(--secondary-color);
                border-radius: 8px;
                padding: 20px;
                margin-bottom: 20px;
            }}
            .flight-path {{
                display: flex;
                align-items: center;
                justify-content: space-between;
                font-size: 1.8em;
                font-weight: 600;
                margin: 15px 0;
            }}
            .flight-path .airport-code {{ color: var(--primary-color); }}
            .flight-path .arrow {{ color: var(--secondary-color); font-weight: 300; }}
            .cover-letter p {{ line-height: 1.8; }}
            .cover-letter ul {{ list-style-type: none; padding-left: 20px; }}
            .footer {{ text-align: center; padding: 20px; font-size: 0.8em; color: #aaa; }}
        </style>
    </head>
    <body>
        <div class="container">
            {body_content}
        </div>
        <div class="footer">
            Generated by Travaky | support@travaky.com
        </div>
    </body>
    </html>
    """

def create_flight_ticket_html(data: dict) -> str:
    main_passenger, hometown = data.get('passenger_name', 'N/A'), data.get('hometown', 'Home City')
    all_passengers = [main_passenger] + [p['name'] for p in data.get('family_members', [])]
    sorted_trips = sorted(data.get('trips', []), key=lambda x: x['arrival_date'])
    manual_cost = data.get('flight_cost', 0.0) * len(all_passengers)
    
    passenger_list = "".join([f"<li>{p['name']} ({p.get('gender', 'N/A')})</li>" for p in [{'name': main_passenger, 'gender': data.get('gender')}] + data.get('family_members', [])])
    
    flight_legs_html = ""
    for i, trip in enumerate(sorted_trips):
        origin = hometown if i == 0 else sorted_trips[i-1]['country']
        flight_legs_html += f"""
        <div class="flight-leg">
            <h3>{trip.get('airline', 'N/A')}: {origin} to {trip.get('country', 'N/A')}</h3>
            <div class="flight-path">
                <span class="airport-code">{origin[:3].upper()}</span>
                <span class="arrow"> -> </span>
                <span class="airport-code">{trip.get('country', 'N/A')[:3].upper()}</span>
            </div>
            <div class="info-grid">
                <div class="info-item"><strong>Date</strong><span>{trip['arrival_date'].strftime('%a, %d %b %Y')}</span></div>
                <div class="info-item"><strong>Departure</strong><span>{trip.get('dep_time', 'N/A')}</span></div>
                <div class="info-item"><strong>Arrival</strong><span>{trip.get('arr_time', 'N/A')}</span></div>
                <div class="info-item"><strong>Flight No.</strong><span>{trip.get('flight_no', 'N/A')}</span></div>
                <div class="info-item"><strong>PNR</strong><span>{trip.get('pnr', 'N/A')}</span></div>
                <div class="info-item"><strong>E-Ticket</strong><span>{trip.get('ticket_no', 'N/A')}</span></div>
            </div>
        </div>
        """

    body = f"""
        <div class="header"><h1>Electronic Ticket</h1><p>{sorted_trips[0].get('airline', 'Travaky Airlines') if sorted_trips else ''}</p></div>
        <div class="content-section"><h2>Flight Summary</h2>{flight_legs_html}</div>
        <div class="content-section"><h2>Passengers</h2><ul>{passenger_list}</ul></div>
        <div class="content-section"><h2>Fare Details</h2><div class="info-grid"><div class="info-item"><strong>Total Fare (USD)</strong><span>$ {manual_cost:,.2f}</span></div></div></div>
    """
    return _get_base_html_template("Flight Ticket", body)

def create_hotel_booking_html(data: dict) -> str:
    selected_stays = data.get('selected_hotels_per_trip', [])
    num_guests = len([data.get('passenger_name')] + [p['name'] for p in data.get('family_members', [])])

    if not selected_stays: return "<html><body>No hotel selected.</body></html>"

    bookings_html = ""
    for stay in selected_stays:
        hotel, trip = stay['hotel_data'], stay['trip_data']
        check_in, check_out = trip['arrival_date'], trip['departure_date']
        num_nights = max(1, (check_out - check_in).days)
        total_cost = float(hotel.get('Rate', 0)) * num_nights * num_guests
        bookings_html += f"""
        <div class="content-section">
            <h2>{hotel['Hotel Name']}</h2>
            <div class="info-grid">
                <div class="info-item"><strong>Location</strong><span>{hotel['City']}, {hotel['Country']}</span></div>
                <div class="info-item"><strong>Check-in</strong><span>{check_in.strftime('%a, %d %b %Y')}</span></div>
                <div class="info-item"><strong>Check-out</strong><span>{check_out.strftime('%a, %d %b %Y')}</span></div>
                <div class="info-item"><strong>Total Nights</strong><span>{num_nights}</span></div>
                <div class="info-item"><strong>Guests</strong><span>{num_guests}</span></div>
                <div class="info-item"><strong>Total Cost (EUR)</strong><span>{total_cost:,.2f}</span></div>
            </div>
        </div>
        """
    body = f"""
        <div class="header" style="background: linear-gradient(135deg, #005f73, #0a9396);"><h1>Booking Confirmed!</h1><p>Your hotel reservations are complete.</p></div>
        {bookings_html}
    """
    return _get_base_html_template("Hotel Confirmation", body)

def create_itinerary_html(data: dict) -> str:
    main_passenger, hometown = data.get('passenger_name', 'N/A'), data.get('hometown', 'Home City')
    sorted_trips = sorted(data.get('trips', []), key=lambda x: x['arrival_date'])
    
    legs_html = ""
    for i, trip in enumerate(sorted_trips):
        origin = hometown if i == 0 else sorted_trips[i-1]['country']
        legs_html += f"""
        <div class="itinerary-leg">
            <div class="info-grid">
                <div class="info-item"><strong>Date</strong><span>{trip['arrival_date'].strftime('%d %b %Y')}</span></div>
                <div class="info-item"><strong>Route</strong><span>{origin}-> {trip['country']}</span></div>
                <div class="info-item"><strong>Airline</strong><span>{trip.get('airline', 'N/A')}</span></div>
                <div class="info-item"><strong>Flight No.</strong><span>{trip.get('flight_no', 'N/A')}</span></div>
            </div>
        </div>
        """
    body = f"""
        <div class="header" style="background: linear-gradient(135deg, #3d5a80, #98c1d9);"><h1>Travel Itinerary</h1><p>Prepared for {main_passenger}</p></div>
        <div class="content-section"><h2>Your Journey</h2>{legs_html}</div>
    """
    return _get_base_html_template("Travel Itinerary", body)

def create_cover_letter_html(text: str) -> str:
    # Split the letter to format the document list nicely
    parts = text.split("Please find below the list of documents enclosed with this application:")
    main_text = parts[0]
    
    list_part = ""
    if len(parts) > 1:
        list_text = parts[1].split("I hope you find everything in order")[0]
        list_items = [item.strip() for item in list_text.split('\n') if item.strip()]
        list_html = "".join([f"<li>{item}</li>" for item in list_items])
        list_part = f"""
        <p>Please find below the list of documents enclosed with this application:</p>
        <ul>{list_html}</ul>
        """
    
    closing_text = "I hope you find everything in order" + parts[1].split("I hope you find everything in order")[1] if len(parts) > 1 else ""

    body = f"""
        <div class="header" style="background: linear-gradient(135deg, #2b2d42, #8d99ae);"><h1>Covering Letter</h1><p>For Visa Application</p></div>
        <div class="content-section cover-letter">
            <p>{main_text.replace(chr(10), '<br>')}</p>
            {list_part}
            <p>{closing_text.replace(chr(10), '<br>')}</p>
        </div>
    """
    return _get_base_html_template("Visa Cover Letter", body)